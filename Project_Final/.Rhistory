keyword <- "김문수"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "김문수.csv")
#------------------------------------------------------------------------------------------#
keyword <- "안철수"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "안철수.csv")
#------------------------------------------------------------------------------------------#
keyword <- "자유한국당"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "자유한국당.csv")
#------------------------------------------------------------------------------------------#
keyword <- "더불어민주당"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "더불어민주당.csv")
#------------------------------------------------------------------------------------------#
keyword <- "바른미래당"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "바른미래당.csv")
#------------------------------------------------------------------------------------------#
keyword <- "미투"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "미투.csv")
#------------------------------------------------------------------------------------------#
keyword <- "문재인"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 1000000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "문재인.csv")
#------------------------------------------------------------------------------------------#
keyword <- "보수"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "보수.csv")
#------------------------------------------------------------------------------------------#
keyword <- "진보"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "진보.csv")
#------------------------------------------------------------------------------------------#
keyword <- "남북정상회담"
twitter <- searchTwitter(keyword, since = stDate, until = tilDate, lang = "ko", n = 100000) ; length(twitter)
twitter.df <- twListToDF(twitter) # DataFrame
names(twitter.df)
twitter.df <- twitter.df[twitter.df$retweetCount!=0,]
twitter.text <- twitter.df$text #mention text만 추출
# Filtering
twitter.text <- gsub("\n", "", twitter.text)
twitter.text <- gsub("\r", "", twitter.text)
twitter.text <- gsub("RT", "", twitter.text)
twitter.text <- gsub("http", "", twitter.text)
twitter.text <- gsub("ㅠ", "", twitter.text)
twitter.text <- gsub("ㅋ", "", twitter.text)
write.csv(twitter.text, "남북정상회담.csv")
# 확인
data1 <- read.csv("지방선거.csv") ; d1 <- dim(data1)
data1 <- read.csv("서울시장.csv") ; d2 <- dim(data1)
data1 <- read.csv("박원순.csv") ; d3 <- dim(data1)
data1 <- read.csv("김문수.csv") ; d4 <- dim(data1)
data1 <- read.csv("안철수.csv") ; d5 <- dim(data1)
data1 <- read.csv("자유한국당.csv") ; d6 <- dim(data1)
data1 <- read.csv("더불어민주당.csv") ; d7 <- dim(data1)
data1 <- read.csv("바른미래당.csv") ; d8 <- dim(data1)
data1 <- read.csv("미투.csv") ; d9 <- dim(data1)
data1 <- read.csv("문재인.csv") ; d10 <- dim(data1)
data1 <- read.csv("보수.csv") ; d11 <- dim(data1)
data1 <- read.csv("진보.csv") ; d12 <- dim(data1)
data1 <- read.csv("남북정상회담.csv") ; d13 <- dim(data1)
data.frame(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13)
day <- as.Date("2018-05-11")
data1 <- read.csv("지방선거.csv")
data1['from'] <- 'Twitter'
data1['Date'] <- day
data1['Keyword'] <- '지방선거'
data2 <- read.csv("서울시장.csv")
data2['from'] <- 'Twitter'
data2['Date'] <- day
data2['Keyword'] <- '서울시장'
data3 <- read.csv("박원순.csv")
data3['from'] <- 'Twitter'
data3['Date'] <- day
data3['Keyword'] <- '박원순'
data4 <- read.csv("김문수.csv")
data4['from'] <- 'Twitter'
data4['Date'] <- day
data4['Keyword'] <- '김문수'
data5 <- read.csv("안철수.csv")
data5['from'] <- 'Twitter'
data5['Date'] <- day
data5['Keyword'] <- '안철수'
data6 <- read.csv("자유한국당.csv")
data6['from'] <- 'Twitter'
data6['Date'] <- day
data6['Keyword'] <- '자유한국당'
data7 <- read.csv("더불어민주당.csv")
data7['from'] <- 'Twitter'
data7['Date'] <- day
data7['Keyword'] <- '더불어민주당'
data8 <- read.csv("바른미래당.csv")
data8['from'] <- 'Twitter'
data8['Date'] <- day
data8['Keyword'] <- '바른미래당'
data9 <- read.csv("미투.csv")
data9['from'] <- 'Twitter'
data9['Date'] <- day
data9['Keyword'] <- '미투'
data10 <- read.csv("문재인.csv")
data10['from'] <- 'Twitter'
data10['Date'] <- day
data10['Keyword'] <- '문재인'
data11 <- read.csv("보수.csv")
data11['from'] <- 'Twitter'
data11['Date'] <- day
data11['Keyword'] <- '보수'
data12 <- read.csv("진보.csv")
data12['from'] <- 'Twitter'
data12['Date'] <- day
data12['Keyword'] <- '진보'
data13 <- read.csv("남북정상회담.csv")
data13['from'] <- 'Twitter'
data13['Date'] <- day
data13['Keyword'] <- '남북정상회담'
dd1 <- rbind(data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13)
dd1 <- dd1[,-1]
View(dd1)
write.csv(dd1, file = "Twitter_20180511.csv")
a <- [1, 2, 3]
b <- [4, 5, 6]
a + b
a <- list(1,2,3)
b <- list(4,5,6)
a + b
a
b <- list(4,5,6)
b
a + b
list(a+b)
load("~/.RData")
C
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
C
head(10)
10
2
3
4
567
8
7654
5
678
76
5
78
6
install.packages("caret"
)
quit()
C
toss_coins <- function(n_toss){
sample(c("H", "T"), n_toss, replace = TRUE)
experiment <- toss_coins(n_toss)
Head <- sum(experiment == "H") / n_toss
Tail <- sum(experiment == "T") / n_toss
df <- data.frame(Head, Tail)
return df
}
toss_coins <- function(n_toss){
sample(c("H", "T"), n_toss, replace = TRUE)
experiment <- toss_coins(n_toss)
Head <- sum(experiment == "H") / n_toss
Tail <- sum(experiment == "T") / n_toss
df <- data.frame(Head, Tail)
return(df)
}
toss_coins(10)
toss_coins(20)
C
toss_coins(10)
toss_coins <- function(n_toss){
experiment <- sample(c("H", "T"), n_toss, replace = TRUE)
Head <- sum(experiment == "H") / n_toss
Tail <- sum(experiment == "T") / n_toss
df <- data.frame(Head, Tail)
return(df)
}
toss_coins(10)
toss_coins(20)
toss_coins(30)
toss_coins(40)
toss_coins(50)
toss_coins(60)
toss_coins(10)
toss_coins(100)
toss_coins(1000)
toss_coins(10000)
toss_coins(1000)
toss_coins(100000)
toss_coins(1000000)
toss_coins(10000000)
toss_dice <- function(n_toss){
experiment <- sample(c(1, 2, 3, 4, 5, 6), n_toss, replace = TRUE)
One <- sum(experiment == 1) / n_toss
Two <- sum(experiment == 2) / n_toss
Three <- sum(experiment == 3) / n_toss
Four <- sum(experiment == 4) / n_toss
Five <- sum(experiment == 5) / n_toss
Six <- sum(experiment == 6) / n_toss
df <- data.frame(One, Two, Three, Four, Five, Six)
return(df)
}
toss_dice(1)
toss_dice(2)
toss_dice(3)
toss_dice(10)
toss_dice(100)
toss_dice(1000)
toss_dice(10000)
toss_dice(100000)
toss_dice(1000000)
toss_dice(10000000)
toss_coins10
toss_coins(10)
toss_coins(20)
toss_coins(30)
toss_coins(40)
toss_coins(50)
toss_coins(60)
n <- 1
while(df$Head == df$Tail){
n = n+1
toss_coins(n)
}
toss_coins(10)
toss_coins(10)
toss_coins(100)
toss_coins(1000)
toss_coins(10000)
toss_coins(100000)
toss_coins(1000000)
toss_coins(10000000)
toss_coins(10)
toss_coins <- function(n_toss){
experiment <- sample(c("H", "T"), n_toss, replace = TRUE)
Head <- sum(experiment == "H") / n_toss
Tail <- sum(experiment == "T") / n_toss
df <- data.frame(Head, Tail)
return(df)
}
toss_coins(10)
toss_coins(100)
toss_coins(1000)
toss_coins(10000)
toss_coins(100000)
toss_coins(1000000)
toss_coins(10000000)
# 주사위 던지기
toss_dice <- function(n_toss){
experiment <- sample(c(1, 2, 3, 4, 5, 6), n_toss, replace = TRUE)
One <- sum(experiment == 1) / n_toss
Two <- sum(experiment == 2) / n_toss
Three <- sum(experiment == 3) / n_toss
Four <- sum(experiment == 4) / n_toss
Five <- sum(experiment == 5) / n_toss
Six <- sum(experiment == 6) / n_toss
df <- data.frame(One, Two, Three, Four, Five, Six)
return(df)
}
toss_dice(10)
# 주사위 던지기
toss_dice <- function(n_toss){
experiment <- sample(c(1, 2, 3, 4, 5, 6), n_toss, replace = TRUE)
One <- sum(experiment == 1) / n_toss
Two <- sum(experiment == 2) / n_toss
Three <- sum(experiment == 3) / n_toss
Four <- sum(experiment == 4) / n_toss
Five <- sum(experiment == 5) / n_toss
Six <- sum(experiment == 6) / n_toss
df <- data.frame(One, Two, Three, Four, Five, Six)
return(df)
}
toss_dice(10)
toss_dice(100)
toss_dice(1000)
toss_dice(10000)
toss_dice(100000)
toss_dice(1000000)
toss_dice(10000000)
C
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
C
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
setwd("~/Desktop/Justin/2018-1/DataMining/Pro3")
?mice
?train
# 이름 (자기 이름으로 고쳐 넣을 것)
name = '안상준'
# 데이터 불러오기 (수정하지 말것)
df <- read.csv('apt.csv')  # 학습용 데이터
test <- read.csv('mid_X.csv')  # 테스트용 데이터(실제 테스트는 중간테스트 데이터와 파일명은 같고 내용은 다름)
dir()
# 학습 및 예측 (수정하여 자신의 모형을 학습시킬 것)
if(!require(caret)) install.packages("caret") ; library(caret)
if(!require(mice)) install.packages("mice") ; library(mice)
if(!require(Amelia)) install.packages("Amelia") ; library(Amelia)
data <- df[,c(-1, -5, -12, -20, -25, -49)]
test <- test[,c(-4, -11, -19, -24, -48)]
levels(data[,1]) <- c(NA, "A", "M", "S", "T")
levels(data[,24]) <- c(NA, "N", "Y")
levels(data[,28]) <- c(NA, "CHP", "LNG", "LPG", "OIL")
levels(data[,29]) <- c(NA, "C", "I", "R")
data_factor <- data[, c(1, 24, 28, 29)] ; head(data_factor, 20) # Factor
data_numeric <- data[, c(-1, -24, -28, -29)] ; head(data_numeric, 20) # Numeric
# Factor & Numeric - Test
levels(test[,1]) <- c(NA, "A", "M", "S", "T")
levels(test[,24]) <- c(NA, "N", "Y")
levels(test[,28]) <- c(NA, "CHP", "LNG", "LPG", "OIL")
levels(test[,29]) <- c(NA, "C", "I", "R")
test_factor <- test[, c(1, 24, 28, 29)] ; head(test_factor, 20) # Factor
test_numeric <- test[, c(-1, -24, -28, -29)] ; head(test_numeric, 20) # Numeric
########################################################################################
# NA
# Factor
library(mice)
data_factor_NA <- mice(data_factor, 5)
df1 <- complete(data_factor_NA, 1) ; head(df1, 20)
df2 <- complete(data_factor_NA, 2) ; head(df2, 20)
df3 <- complete(data_factor_NA, 3) ; head(df3, 20)
df4 <- complete(data_factor_NA, 4) ; head(df4, 20)
df5 <- complete(data_factor_NA, 5) ; head(df5, 20)
test_factor_NA <- mice(test_factor, 5)
tdf1 <- complete(test_factor_NA, 1) ; head(tdf1, 20)
tdf2 <- complete(test_factor_NA, 2) ; head(tdf2, 20)
tdf3 <- complete(test_factor_NA, 3) ; head(tdf3, 20)
tdf4 <- complete(test_factor_NA, 4) ; head(tdf4, 20)
tdf5 <- complete(test_factor_NA, 5) ; head(tdf5, 20)
########################################################################################
# Numeric
library(Amelia)
data_numeric_NA <- amelia(data_numeric, m = 5)
adf1 = data_numeric_NA$imputations[[1]] ; adf1[adf1 < 0] = 0 ; head(adf1)
adf2 = data_numeric_NA$imputations[[2]] ; adf2[adf2 < 0] = 0 ; head(adf2)
adf3 = data_numeric_NA$imputations[[3]] ; adf3[adf3 < 0] = 0 ; head(adf3)
adf4 = data_numeric_NA$imputations[[4]] ; adf4[adf4 < 0] = 0 ; head(adf4)
adf5 = data_numeric_NA$imputations[[5]] ; adf5[adf5 < 0] = 0 ; head(adf5)
test_numeric_NA <- amelia(test_numeric, m = 5)
tadf1 = test_numeric_NA$imputations[[1]] ; tadf1[tadf1 < 0] = 0 ; head(tadf1)
tadf2 = test_numeric_NA$imputations[[2]] ; tadf2[tadf2 < 0] = 0 ; head(tadf2)
tadf3 = test_numeric_NA$imputations[[3]] ; tadf3[tadf3 < 0] = 0 ; head(tadf3)
tadf4 = test_numeric_NA$imputations[[4]] ; tadf4[tadf4 < 0] = 0 ; head(tadf4)
tadf5 = test_numeric_NA$imputations[[5]] ; tadf5[tadf5 < 0] = 0 ; head(tadf5)
########################################################################################
# Merge
data1 <- cbind(df1, adf1) ; test1 <- cbind(tdf1, tadf1)
data2 <- cbind(df2, adf2) ; test2 <- cbind(tdf2, tadf2)
data3 <- cbind(df3, adf3) ; test3 <- cbind(tdf3, tadf3)
data4 <- cbind(df4, adf4) ; test4 <- cbind(tdf4, tadf4)
data5 <- cbind(df5, adf5) ; test5 <- cbind(tdf5, tadf5)
########################################################################################
# Preprocess - Train
data <- data4
# Outlier
w1 <- which(data[,6] == 651.9200)
w2 <- which(data[,27] == 249024.5600)
w3 <- which(data[,27] == 201802.7800)
w4 <- which(data[,28] == 2222)
w5 <- which(data[,28] == 1113)
data <- data[-c(w1, w2, w3, w4, w5),]
# Log
for (i in c(5, 27, 28, 29, 32, 36, 38, 39, 40, 41, 42, 44))(
data[,i] = log(data[,i]))
for (i in c(5, 27, 28, 29, 32, 36, 38, 39, 40, 41, 42, 44))(
data[,i][is.infinite(data[,i])] = 0
)
# Preprocess - Test
test <- test4
# Outlier
t1 <- which(test[,27] == 249024.5600)
t2 <- which(test[,27] == 201802.7800)
# Log
for (i in c(5, 27, 28, 29, 32, 36, 38, 39, 40, 41, 42))(
test[,i] <- log(test[,i])
)
for (i in c(5, 27, 28, 29, 32, 36, 38, 39, 40, 41, 42))(
test[,i][is.infinite(test[,i])] = 0
)
########################################################################################
# Setting
set.seed(1130)
library(caret)
control <- trainControl(method = 'cv', search = 'grid', number = 5)
#2500
xgb.grid = expand.grid(.nrounds = 2500,.max_depth = 8,.eta = 0.1,.gamma = 0,.colsample_bytree = 1,.min_child_weight = 1,.subsample = 0.8)
xgb.model <- train(price ~ .,data = data,tuneGrid = xgb.grid,tuneLength = 1,trControl = control,method = 'xgbTree')
#########################################################################################################################################################
price <- exp(entire.ensemble)
m <- c(10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11)
price <- exp(m)
price
########################################################################################
# 결과 저장 (수정하지 말것)
write.csv(data.frame(price=price), paste0(name, '.csv'))
#2500
xgb.grid = expand.grid(.nrounds = 2500,.max_depth = 8,.eta = 0.1,.gamma = 0,.colsample_bytree = 1,.min_child_weight = 1,.subsample = 0.8)
xgb.model <- train(price ~ .,data= data,tuneGrid = xgb.grid,tuneLength = 1,trControl = control,method = 'xgbTree')
Rm(list=ls())
rm(list=ls())
# 데이터 불러오기 (수정하지 말것)
df <- read.csv('apt.csv')  # 학습용 데이터
test <- read.csv('mid_X.csv')  # 테스트용 데이터(실제 테스트는 중간테스트 데이터와 파일명은 같고 내용은 다름)
library(caret)
idx <- createDataPartition(df$price, p = 0.8, list = F)
head(idx)
tail(idx)
idx <- createDataPartition(df$price, p = 0.8, list = T)
head(idx)
tail(idx)
